{"mappings":"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","sources":["src/index.js","src/battleship.js"],"sourcesContent":["import { Battleship } from './battleship';\n\nconst SIZE = 10;\nconst wrapperEl = document.getElementById('app');\nconst startBtn = document.getElementById('start-btn');\nconst missedShotsEl = document.getElementById('missed');\nconst sinkedCorvetteEl = document.getElementById('corvette');\nconst sinkedFregateEl = document.getElementById('fregate');\nconst sinkedDestroyerEl = document.getElementById('destroyer');\nconst sinkedCruiserEl = document.getElementById('cruiser');\n\nconst DESTROYED = 0;\nconst MISS = 6;\nconst EMPTY = 7;\n\nlet missedHits = 0;\nlet sinkedCorvette = 0;\nlet sinkedFregate = 0;\nlet sinkedDestroyer = 0;\nlet sinkedCruiser = 0;\n\nconst battleship = new Battleship(SIZE);\n\nbattleship.randomize(wrapperEl);\n\nstartBtn.addEventListener('click', () => {\n  battleship.clearBoard(wrapperEl);\n  battleship.randomize(wrapperEl);\n});\n\nwrapperEl.addEventListener('click', event => {\n  const clickedCell = event.target;\n  const x = +clickedCell.dataset.row;\n  const y = +clickedCell.dataset.column;\n  const ship = battleship.board[x][y];\n  if (ship.size > DESTROYED && ship.size < MISS) {\n    clickedCell.innerHTML = 'ðŸ”¥';\n    clickedCell.classList.add('hit');\n    battleship.board[x][y].size -= 1;\n    if (battleship.board[x][y].size === 0) {\n      ship.cells.forEach(cell => {\n        const destroyedCell = document.querySelector(`[data-number=\"${cell}\"]`);\n        destroyedCell.innerHTML = 'âš“';\n        destroyedCell.classList.add('destroyed');\n      });\n      console.log(ship.cells.length);\n      switch (ship.cells.length) {\n        case 1:\n          sinkedCorvette += 1;\n          sinkedCorvetteEl.innerText = sinkedCorvette;\n          break;\n        case 2:\n          sinkedFregate += 1;\n          sinkedFregateEl.innerText = sinkedFregate;\n          break;\n        case 3:\n          sinkedDestroyer += 1;\n          sinkedDestroyerEl.innerText = sinkedDestroyer;\n          break;\n        case 4:\n          sinkedCruiser += 1;\n          sinkedCruiserEl.innerText = sinkedCruiser;\n          break;\n      }\n    }\n  }\n  if (ship === EMPTY) {\n    clickedCell.innerHTML = 'âš«';\n    clickedCell.classList.add('miss');\n    battleship.board[x][y] = MISS;\n    missedHits += 1;\n    missedShotsEl.innerText = missedHits;\n  }\n});\n","export class Battleship {\n  size;\n  max;\n\n  empty = 7;\n\n  constructor(size) {\n    this.size = size;\n    this.max = size * size - 1;\n    this.board = new Array(this.size)\n      .fill(this.empty)\n      .map(() => new Array(this.size).fill(this.empty));\n  }\n\n  randomNumber() {\n    return Math.floor(Math.random() * (this.max - 0) + 0);\n  }\n\n  shipsSpace = [];\n\n  placeShip(number, ship) {\n    const x = Math.floor(number / this.size);\n    const y = number % this.size;\n    this.board[x][y] = ship;\n    ship.cells.push([number]);\n    const shipSpace = [\n      number,\n      number - 1,\n      number + 1,\n      number - this.size,\n      number + this.size,\n      number - this.size + 1,\n      number + this.size + 1,\n      number - this.size - 1,\n      number + this.size - 1,\n    ];\n    shipSpace.forEach(number => {\n      if (!this.shipsSpace.includes(number)) {\n        this.shipsSpace.push(number);\n      }\n    });\n  }\n\n  randomShip(size) {\n    const number = this.randomNumber();\n    const direction = this.checkLimit(number, size);\n    if (this.shipsSpace.includes(number) || direction === false) {\n      return this.randomShip(size);\n    }\n    const ship = {\n      id: number,\n      size: size,\n      cells: [],\n    };\n    switch (direction) {\n      case 'left':\n        for (let i = 0; i < size; i++) {\n          this.placeShip(number - i, ship);\n        }\n        break;\n      case 'right':\n        for (let i = 0; i < size; i++) {\n          this.placeShip(number + i, ship);\n        }\n        break;\n      case 'up':\n        for (let i = 0; i < size; i++) {\n          this.placeShip(number - this.size * i, ship);\n        }\n        break;\n      case 'down':\n        for (let i = 0; i < size; i++) {\n          this.placeShip(number + this.size * i, ship);\n        }\n        break;\n    }\n  }\n\n  randomize(container) {\n    this.randomShip(4);\n    this.randomShip(3);\n    this.randomShip(3);\n    this.randomShip(2);\n    this.randomShip(2);\n    this.randomShip(2);\n    this.randomShip(1);\n    this.randomShip(1);\n    this.randomShip(1);\n    this.randomShip(1);\n    this.drawBoard(container);\n  }\n\n  clearBoard(container) {\n    container.innerHTML = '';\n    this.shipsSpace = [];\n    this.board = new Array(this.size)\n      .fill(this.empty)\n      .map(() => new Array(this.size).fill(this.empty));\n  }\n\n  drawBoard(container) {\n    this.board.forEach((row, rowIndex) => {\n      const rowEl = document.createElement('div');\n      rowEl.classList.add('row');\n      container.appendChild(rowEl);\n      row.forEach((column, columnIndex) => {\n        const cell = document.createElement('div');\n        cell.classList.add('cell');\n        rowEl.appendChild(cell);\n        cell.dataset.row = rowIndex;\n        cell.dataset.column = columnIndex;\n        cell.dataset.number = rowIndex * 10 + columnIndex;\n      });\n    });\n  }\n\n  checkLimit(number, size) {\n    const directionNumber = this.randomNumber(3);\n    let direction = '';\n    let limit = 0;\n    let newShipNumbers = [];\n    let bool = true;\n    switch (directionNumber) {\n      case 0:\n        direction = 'left';\n        break;\n      case 1:\n        direction = 'up';\n        break;\n      case 2:\n        direction = 'right';\n        break;\n      case 3:\n        direction = 'down';\n        break;\n    }\n    switch (direction) {\n      case 'left':\n        limit = (number % this.size) - size;\n        for (let i = 0; i < size; i++) {\n          newShipNumbers.push(number - i);\n        }\n        break;\n      case 'right':\n        limit = (number % this.size) + size;\n        for (let i = 0; i < size; i++) {\n          newShipNumbers.push(number + i);\n        }\n        break;\n      case 'up':\n        limit = Math.floor(number / this.size) - size;\n        for (let i = 0; i < size; i++) {\n          newShipNumbers.push(number - this.size * i);\n        }\n        break;\n      case 'down':\n        limit = Math.floor(number / this.size) + size;\n        for (let i = 0; i < size; i++) {\n          newShipNumbers.push(number + this.size * i);\n        }\n        break;\n    }\n    newShipNumbers.forEach(number => {\n      if (this.shipsSpace.includes(number)) {\n        direction = false;\n      }\n    });\n    if (limit > 0 && limit <= this.size) {\n      return direction;\n    } else {\n      return false;\n    }\n  }\n}\n\n/* \n0 - destroyed\n1 - oneShip\n2 - twoShip\n3 - threeShip\n4 - fourShip\n6 - miss\n7 - empty\n*/\n"],"names":["$35da740d59af89ba$var$wrapperEl","document","getElementById","$35da740d59af89ba$var$startBtn","$35da740d59af89ba$var$missedShotsEl","$35da740d59af89ba$var$sinkedCorvetteEl","$35da740d59af89ba$var$sinkedFregateEl","$35da740d59af89ba$var$sinkedDestroyerEl","$35da740d59af89ba$var$sinkedCruiserEl","$35da740d59af89ba$var$missedHits","$35da740d59af89ba$var$sinkedCorvette","$35da740d59af89ba$var$sinkedFregate","$35da740d59af89ba$var$sinkedDestroyer","$35da740d59af89ba$var$sinkedCruiser","$35da740d59af89ba$var$battleship","size","max","empty","constructor","this","board","Array","fill","map","randomNumber","Math","floor","random","shipsSpace","placeShip","number","ship","x","y","cells","push","forEach","includes","randomShip","direction","checkLimit","id","i","randomize","container","drawBoard","clearBoard","innerHTML","row","rowIndex","rowEl","createElement","classList","add","appendChild","column","columnIndex","cell","dataset","directionNumber","limit","newShipNumbers","addEventListener","event","clickedCell","target","destroyedCell","querySelector","console","log","length","innerText"],"version":3,"file":"index.f8cf0d47.js.map"}